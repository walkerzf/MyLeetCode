#### [1201. Ugly Number III](https://leetcode-cn.com/problems/ugly-number-iii/)

Write a program to find the `n`-th ugly number.

Ugly numbers are **positive integers** which are divisible by `a` **or** `b` **or** `c`.

**Example 1:**

```
Input: n = 3, a = 2, b = 3, c = 5
Output: 4
Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.
```

**Example 2:**

```
Input: n = 4, a = 2, b = 3, c = 4
Output: 6
Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.
```

**Example 3:**

```
Input: n = 5, a = 2, b = 11, c = 13
Output: 10
Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.
```

**Example 4:**

```
Input: n = 1000000000, a = 2, b = 217983653, c = 336916467
Output: 1999999984
```

**Constraints:**

- `1 <= n, a, b, c <= 10^9`
- `1 <= a * b * c <= 10^18`
- It's guaranteed that the result will be in range `[1, 2 * 10^9]`



**Attention : the prime divisor   the divisor are different .In ugly number 2 ,all factors are prime. So when we want to generate the ugly number,we use the ugly number which is generated before ,and use the multiple.An ugly number must be multiplied by either``` 2, 3, or 5``` from a smaller ugly number.**

## GCD LCM

For every integer N, `F(N) = (total number of positive integers <= N which are divisible by a or b or c.).`
<img src="https://assets.leetcode.com/users/insomniacat/image_1569133734.png" alt="image" style="zoom:25%;" />

The left-top circle stands for numbers <= N that are divisible by `a`.

others are  the same idea, and the intersection of two/three circles is the total number of positive integers <= N which are divisible by the`least common multiple` of them.
`F(N) = a + b + c - a ∩ c - a ∩ b - b ∩ c + a ∩ b ∩ c`
`F(N) = N/a + N/b + N/c - N/lcm(a, c) - N/lcm(a, b) - N/lcm(b, c) + N/lcm(a, b, c)`(lcm = least common multiple)
Find the least integer `N` that satisfies the condition `F(N) >= K

```c++
class Solution {
public:
    int nthUglyNumber(int n, int a, int b, int c) {
        long ab = __gcd(a, b);
        long bc = __gcd(b, c);
        long ac = __gcd(a, c);
        long lcmab = 1.0*a * b / ab;
        long lcmbc = 1.0*b * c / bc;
        long lcmac = 1.0*a * c / ac;
        long lcmabc = 1.0* a * lcmbc / __gcd((long)a, lcmbc);
        int l = 0;
        int r = 2e9;
        while (l < r) {
            int mid = (r - l) / 2 + l;
            int count = mid / a + mid / b + mid / c - (mid / lcmab + mid / lcmac + mid / lcmbc) + mid / lcmabc;
            if(count<n){
                l = mid+1;
            }else{
                r = mid;
            }
        }
        return l;
    }
};
```

